% MultiClass 函数基于随机梯度下降策略，使用反向传播算法，通过训练数据集对权重进行更新。
% MultiClass 函数使用多层神经网络解决多类别分类问题。
%
% W1 为 50x25 矩阵，是输入层与隐藏层之间的权重参数。
% W2 为 5x50 矩阵，是隐藏层与输出层之间的权重参数。
% X 为 5x5x5 张量，包含所有训练样本的特征。
% D 为 5x5 矩阵，包含所有训练样本的标签。
%
% 该函数返回更新后的权重参数 W1 与 W2。
function [W1, W2] = MultiClass(W1, W2, X, D)
  alpha = 0.9; % 学习率

  N = 5; % 训练数据的数量，亦即张量 X 第一维的大小
  for k = 1:N
    x = reshape(X(:, :, k), 25, 1); % 一个单独的训练样本的特征向量
                                    % 注意这里进行了 reshape，将矩阵转换为列向量
                                    % 25 维向量
    d = D(k, :)'; % 该样本的标签
                  % 注意这里进行了转置，将行向量转换为列向量
                  % 5 维向量

    v1 = W1*x; % 隐藏层的加权和
               % 50x1 矩阵（50 维向量）（[50x25] x [25x1] = [50x1]）
    y1 = Sigmoid(v1); % 隐藏层的激活值
                      % 50x1 矩阵（50 维向量）
    v  = W2*y1; % 输出层的加权和
                % 5x1 矩阵（5 维向量）（[5x50] x [50x1] = [5x1]）
    y  = Softmax(v); % 输出层的激活值
                     % 5x1 矩阵（5 维向量）

    e     = d - y; % 输出层的 e
                   % 5x1 矩阵（5 维向量）
    delta = e; % 输出层的 delta
               % 这里由于同时使用了 Softmax 激活函数和 cross entropy 损失函数，所以 delta = e，详见《Matlab Deep Learning》P95
               % 5x1 矩阵（5 维向量）

    e1     = W2'*delta; % 隐藏层的 e
                        % 50x1 矩阵（50 维向量）（[5x50]' x [5x1] = [50x1]）
    delta1 = y1.*(1-y1).*e1; % 隐藏层的 delta，其中 y*(1-y) 是 sigmoid 函数的导数
                             % 50x1 矩阵（50 维向量）

    dW1 = alpha*delta1*x'; % 输入-隐藏权重参数的更新值
                           % 注意这里将 x 进行了转置，将列向量转换为行向量
                           % 50x25 矩阵（[50x1] x [25x1]' = [50x25]）
    W1 = W1 + dW1; % dW1 和 W1 的形状相同

    dW2 = alpha*delta*y1'; % 隐藏-输出权重参数的更新值
                           % 注意这里将 y1 进行了转置，将列向量转换为行向量
                           % 5x50 矩阵（[5x1] x [50x1]' = [5x50]）
    W2 = W2 + dW2; % dW2 和 W2 的形状相同
  end
end